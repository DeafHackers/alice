.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AnyEvent::IRC 3"
.TH AnyEvent::IRC 3 "2011-02-28" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
AnyEvent::IRC \- An event based IRC protocol client API
.SH "VERSION"
.IX Header "VERSION"
Version 0.96
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Using the simplistic AnyEvent::IRC::Connection:
.PP
.Vb 2
\&   use AnyEvent;
\&   use AnyEvent::IRC::Connection;
\&
\&   my $c = AnyEvent\->condvar;
\&
\&   my $con = new AnyEvent::IRC::Connection;
\&
\&   $con\->connect ("localhost", 6667);
\&
\&   $con\->reg_cb (
\&      connect => sub {
\&         my ($con) = @_;
\&         $con\->send_msg (NICK => \*(Aqtestbot\*(Aq);
\&         $con\->send_msg (USER => \*(Aqtestbot\*(Aq, \*(Aq*\*(Aq, \*(Aq0\*(Aq, \*(Aqtestbot\*(Aq);
\&      },
\&      irc_001 => sub {
\&         my ($con) = @_;
\&         print "$_[1]\->{prefix} says I\*(Aqm in the IRC: $_[1]\->{params}\->[\-1]!\en";
\&         $c\->broadcast;
\&      }
\&   );
\&
\&   $c\->wait;
.Ve
.PP
Using the more sophisticated AnyEvent::IRC::Client:
.PP
.Vb 2
\&   use AnyEvent;
\&   use AnyEvent::IRC::Client;
\&
\&   my $c = AnyEvent\->condvar;
\&
\&   my $timer;
\&   my $con = new AnyEvent::IRC::Client;
\&
\&   $con\->reg_cb (registered => sub { print "I\*(Aqm in!\en"; });
\&   $con\->reg_cb (disconnect => sub { print "I\*(Aqm out!\en"; $c\->broadcast });
\&   $con\->reg_cb (
\&      sent => sub {
\&         my ($con) = @_;
\&
\&         if ($_[2] eq \*(AqPRIVMSG\*(Aq) {
\&            print "Sent message!\en";
\&
\&            $timer = AnyEvent\->timer (
\&               after => 1,
\&               cb => sub {
\&                  undef $timer;
\&                  $con\->disconnect (\*(Aqdone\*(Aq)
\&               }
\&            );
\&         }
\&      }
\&   );
\&
\&   $con\->send_srv (
\&      PRIVMSG => \*(Aqelmex\*(Aq,
\&      "Hello there I\*(Aqm the cool AnyEvent::IRC test script!"
\&   );
\&
\&   $con\->connect ("localhost", 6667, { nick => \*(Aqtestbot\*(Aq });
\&   $c\->wait;
\&   $con\->disconnect;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The AnyEvent::IRC module consists of AnyEvent::IRC::Connection,
AnyEvent::IRC::Client and AnyEvent::IRC::Util. AnyEvent::IRC
is just a module that holds this overview over the other modules.
.PP
AnyEvent::IRC can be viewed as toolbox for handling \s-1IRC\s0 connections
and communications. It won't do everything for you, and you still
need to know a few details of the \s-1IRC\s0 protocol.
.PP
AnyEvent::IRC::Client is a more highlevel \s-1IRC\s0 connection
that already processes some messages for you and will generated some
events that are maybe useful to you. It will also do \s-1PING\s0 replies for you,
manage channels a bit, nicknames and \s-1CTCP\s0.
.PP
AnyEvent::IRC::Connection is a lowlevel connection that only connects
to the server and will let you send and receive \s-1IRC\s0 messages.
AnyEvent::IRC::Connection does not imply any client behaviour, you could also
use it to implement an \s-1IRC\s0 server.
.PP
Note that these modules use AnyEvent as it's \s-1IO\s0 event subsystem.
You can integrate them into any application with a event system
that AnyEvent has support for (eg. Gtk2 or Event).
.SH "EXAMPLES"
.IX Header "EXAMPLES"
See the samples/ directory for some examples on how to use AnyEvent::IRC.
.SH "AUTHOR"
.IX Header "AUTHOR"
Robin Redeker, \f(CW\*(C`<elmex@ta\-sa.org>\*(C'\fR
.SH "SEE ALSO"
.IX Header "SEE ALSO"
AnyEvent::IRC::Util
.PP
AnyEvent::IRC::Connection
.PP
AnyEvent::IRC::Client
.PP
AnyEvent
.PP
\&\s-1RFC\s0 1459 \- Internet Relay Chat: Client Protocol
.PP
\&\s-1RFC\s0 2812 \- Internet Relay Chat: Client Protocol
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-net\-irc3 at rt.cpan.org\*(C'\fR, or through the web interface at
http://rt.cpan.org/NoAuth/ReportBug.html?Queue=AnyEvent\-IRC <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=AnyEvent-IRC>.
I will be notified, and then you'll automatically be notified of progress on
your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc AnyEvent::IRC
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
http://annocpan.org/dist/AnyEvent\-IRC <http://annocpan.org/dist/AnyEvent-IRC>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
http://cpanratings.perl.org/d/AnyEvent\-IRC <http://cpanratings.perl.org/d/AnyEvent-IRC>
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker
.Sp
http://rt.cpan.org/NoAuth/Bugs.html?Dist=AnyEvent\-IRC <http://rt.cpan.org/NoAuth/Bugs.html?Dist=AnyEvent-IRC>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
http://search.cpan.org/dist/AnyEvent\-IRC <http://search.cpan.org/dist/AnyEvent-IRC>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Thanks to Marc Lehmann for the new AnyEvent module!
.PP
And these people have helped to work on AnyEvent::IRC:
.PP
.Vb 4
\&   * Maximilian Gass \- Added support for ISUPPORT and CASEMAPPING.
\&   * Zaba            \- Thanks for the useful input about IRC.
\&   * tokuhirom       \- Thanks for patches for the kick event.
\&   * Kazuhiro Osawa  \- Thanks for the documenation fix.
.Ve
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2006\-2009 Robin Redeker, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
